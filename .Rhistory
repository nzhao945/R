<<<<<<< HEAD
summary(AIC(fit1,fit2))
library(MASS)
fit1<-lm(Murder~Population+Illiteracy+Income+Frost,data = states)
stepAIC(fit1,direction = "backward")
install.packages(leaps)
install.packages("leaps")
library(leaps)
?leaps\
?leaps
leaps<- regsubsets(Murder~Population+Illiteracy+Income+Frost,data = states,nbest = 4)
leaps
plot(leaps,scale = "adjr2")
?plot
plot(leaps)
library(car)
subsets(leaps,statistic = "cp")
subsets(leaps,statistic = "cp")
abline(1,1,lty=2,col="red")
?abline
plot(leaps,scale = "adjrd")
plot(leaps,scale = "adjr1")
plot(leaps,scale = "adjr2")
subsets(leaps,statistic = "cp")
subsets(leaps,statistic = "cp")
subsets(leaps,statistic = "cp")
abline(1,1,lty=2,col="red")
shrinkage<- function(fit,k=10){
require(bootstrap)
theta.fit <- function(x,y){
lsfit(x,y)
}
theta.predict <- function(fit,x){
cbind(1,x)%*%fit$coef
}
x <- fit$model[,2:ncol(fit$model)]
y <- fit$model[,1]
results <- crossval(x,y,theta.fit,theta.predict,ngroup=k)
r2 <- cor(y,fit$fitted.values)^2
cat("Original R-square =",r2,"\n")
cat(k,"Fold Cross-Validated R-square =",r2cv,"\n")
cat("Change =",r2-r2cv,"\n")
}
?require
if(require("lme4")){
print("lme4 is loaded correctly")
} else {
print("trying to install lme4")
install.packages("lme4")
if(require(lme4)){
print("lme4 installed and loaded")
} else {
stop("could not install lme4")
}
?bootstrap
install.packages("bootstrap")
library(bootstrap)
fit$model
fit
ncol(fit$model)
?lsfit
fit$model[,2:ncol(fit$model)]
fit$model[,1]
?crossval
xx <- rnorm(85)
xx
yy <- 2*x +.5*rnorm(85)
yy
yy <- 2*xx +.5*rnorm(85)
cbind(1,xx)%*%fit$coef
theta.predict <- function(fit,xx){
cbind(1,xx)%*%fit$coef
}
theta.predict()
results <- crossval(x,y,theta.fit,theta.predict,ngroup=6)
results <- crossval(xx,yy,theta.fit,theta.predict,ngroup=6)
theta.fit <- function(xx,yy){lsfit(xxx,yy)}
results <- crossval(xx,yy,theta.fit,theta.predict,ngroup=6)
results <- crossval(xx,yy,theta.fit,theta.predict,ngroup=6)
fit$coef
fit$coefficients
?cor
shrinkage(fit)
fit<- lm(Murder~Population+Income+Illiteracy+Frost,data = states)
shrinkage(fit)
shrinkage<- function(fit,k=10){
require(bootstrap)
theta.fit <- function(x,y){
lsfit(x,y)
}
theta.predict <- function(fit,x){
cbind(1,x)%*%fit$coef
}
x <- fit$model[,2:ncol(fit$model)]
y <- fit$model[,1]
results <- crossval(x,y,theta.fit,theta.predict,ngroup=k)
r2 <- cor(y,fit$fitted.values)^2
r2cv <- cor(y,results$cv.fit)^2
cat("Original R-square =",r2,"\n")
cat(k,"Fold Cross-Validated R-square =",r2cv,"\n")
cat("Change =",r2-r2cv,"\n")
}
shrinkage(fit)
shrinkage(fit)
junzhi<-function(fit,n=10){
all<-0
for(i 1:n){
shrinkage(fit)
return<-return(r2cv)
all<- all+return
}
return(all)
}
shrinkage(fit2)
shrinkage
?crossval
?scale
scale(states)
zstates<-as.data.frame(scale(states))
states
scale(xx)
coef(fit)
coef(fit)
relweights<-function(fit,...){
R <- cor(fit$model)
nvar <-ncol(R)
rxx <- R[2:nvar,2:nvar]
rxy <- R[2:nvar,1]
svd <-eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec%*%delta %*% t(evec)
lambdasq <- lambda^2
beta <- solve(lambda)%*%rxy
rsquare <- colSums(beta^2)
rawwgt <- lambdasq %*% beta^2
import <- (rawwgt/rsquare)*100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(t(import),names.arg = lbls,
ylab = "% of R-square",
xlab = "Predictor Variables",
main = "Relative Importance of Predictor Variables",
sub = paste("R-square="，round(rquare,digits = 3)),...)
}
relweights<-function(fit,...){
+     R <- cor(fit$model)
+     nvar <-ncol(R)
+     rxx <- R[2:nvar,2:nvar]
+     rxy <- R[2:nvar,1]
+     svd <-eigen(rxx)
+     evec <- svd$vectors
+     ev <- svd$values
+     delta <- diag(sqrt(ev))
+     lambda <- evec%*%delta %*% t(evec)
+     lambdasq <- lambda^2
+     beta <- solve(lambda)%*%rxy
+     rsquare <- colSums(beta^2)
+     rawwgt <- lambdasq %*% beta^2
+     import <- (rawwgt/rsquare)*100
+     lbls <- names(fit$model[2:nvar])
+     rownames(import) <- lbls
+     colnames(import) <- "Weights"
+     barplot(t(import),names.arg = lbls,
+             ylab = "% of R-square",
+             xlab = "Predictor Variables",
+             main = "Relative Importance of Predictor Variables",
+             sub = paste("R-square="，round(rquare,digits = 3)),...)
}
relweights<-function(fit,...){
R <- cor(fit$model)
nvar <-ncol(R)
rxx <- R[2:nvar,2:nvar]
rxy <- R[2:nvar,1]
svd <-eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec%*%delta %*% t(evec)
lambdasq <- lambda^2
beta <- solve(lambda)%*%rxy
rsquare <- colSums(beta^2)
rawwgt <- lambdasq %*% beta^2
import <- (rawwgt/rsquare)*100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(t(import),names.arg = lbls,
ylab = "% of R-square",
xlab = "Predictor Variables",
main = "Relative Importance of Predictor Variables",
sub = paste("R-square="，round(rquare,digits = 3)),...)
}
relweights<-function(fit,...){
R <- cor(fit$model)
nvar <-ncol(R)
rxx <- R[2:nvar,2:nvar]
rxy <- R[2:nvar,1]
svd <-eigen(rxx)
evec <- svd$vectors
ev <- svd$values
delta <- diag(sqrt(ev))
lambda <- evec%*%delta %*% t(evec)
lambdasq <- lambda^2
beta <- solve(lambda)%*%rxy
rsquare <- colSums(beta^2)
rawwgt <- lambdasq %*% beta^2
import <- (rawwgt/rsquare)*100
lbls <- names(fit$model[2:nvar])
rownames(import) <- lbls
colnames(import) <- "Weights"
barplot(
t(import),names.arg = lbls,
ylab = "% of R-square",
xlab = "Predictor Variables",
main = "Relative Importance of Predictor Variables",
sub = paste("R-square=",round(rquare,digits = 3)),...
)
return(import)
}
relweights(fit,col="lightgrey")
relweights(fit,col="lightgrey")
1
relweights(fit,col="lightgrey")
relweights(fit,col="lightgrey")
aov()
aov
?aov
library(car)
install.packages("multcomp\")
install.packages("multcomp")
library(multcomp)
TH.data::
TH.data
?multcomp
??multcomp
cholesterol
library(multcomp)
attahc
attach(cholesterol)
table(trt)
?aggregate
aggregate(response)
aggregate(response,by=list(trt),fun=mean)
aggregate(response,by=list(trt),FUN=mean)
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
testDF
by1
cat(testDF,by1)
as.data.frame(testDF,by1)
as.data.frame(testDF,by1)->t
t
View(t)
paste(testDF,by1)
paste(testDF,by1)->t
t
fit<- aov(response~trt)
fit
summary(fit)
install.packages("gplots")
library(gplots)
plotmeans(response~trt)
detach(cholesterol)
？anova
?anova
?anova
?Anova
??Anova
?TukeyHSD\
?TukeyHSD
search()
fit
TukeyHSD(fit)
fit$model
?par
par(las=2)
par(mar=c(5,8,4,2))
plogis(TukeyHSD(fit))
plog(TukeyHSD(fit))
plot(TukeyHSD(fit))
par(mar=c(5,10,4,2))
plot(TukeyHSD(fit))
par(mar=c(5,4,4,2))
plot(TukeyHSD(fit))
library(multcomp)
?TukeyHSD
par(mar=c(5,4,6,2))
?glht
tuk <-glht(fit,linfct=mcp(trt="Tukey"))
tuk
tuk
?qqplot
library(car)
bartlett.test(response~trt,data = cholesterol)
?cholesterol
??cholesterol
library(multcomp)
bartlett.test(response~trt,data = cholesterol)
data(package="car")
detach("package::car")
search()
detach("package:car")
search
search()
library(car)
outlierTest()
outlierTest(fit)
plot(outlierTest(fit))
getwd()
getwd()
install.packages("StableEstim")
library(car)
??car
?car
data(litter,package = "multcomp")
?data
View(relweights)
attach(litter)
litter
head(litter)
tail(litter)
fit<-aov(weight~gesttime+dose)
fit
summary(fit)
?glht
??glht
help(glht)
rbing
?rbind
install.packages("mice")
ver()
version
RStudio.Version()
install.packages(c("VIM","mice"))
data(sleep,package = "VIM")
View(sleep)
View(sleep[which(Exp=1)])
?labels
2/3
options(digits = 2)
2/3
2/3
options()
options
options(digits = 5)
complete.cases(sleep)
sleep[complete.cases(sleep)]
sleep[complete.cases(sleep),]
nrows(sleep[complete.cases(sleep),])
nrow(sleep[complete.cases(sleep),])
na.omit(sleep)
library(mice)
?mice
imp <- mice(sleep,5,seed = 1234)
imp <- mice(sleep,seed = 1234)
imp <- mice(sleep,6,seed = 1234)
imp <- mice(sleep,seed = 1234)
fit <- with(imp,lm(Dream~Span+Gest))
fit
pooled <- pool(fit)
summary(pooled)
imp
imp$Dream
imp$imp$Dream
complete(imp,action = 3)
install.packages("ggplot2")
library(lattice)
View(singer)
histogram(~height|voice.part,data = singer,type = "percent")
histogram(~height|voice.part,data = singer,type = "density")
View(sleep)
str(sleep)
histogram(~BrainWgt|Exp+Pred,data = sleep)
histogram(~BrainWgt|Exp,data = sleep)
str(singer)
dotplot(~height|voice.part,data = singer)
dotplot(~height,data = singer)
histogram(voice.part~height,data = singer)
histogram(~height,data = singer)
library(lattice)
=======
>>>>>>> 0e6aad1891befee8505b643ee3351d24bbc8fc18
attach(mtcars)
View(mtcars)
str(mtcars)
View(gear)
gear <- factor(mtcars$gear,levels = c(3,4,5),labels = c("3 gears","4 gears","5 gears"))
str(mtcars)
gear
mtcars$gear
cyl <- factor(mtcars$cyl,levels = c(4,6,8),labels = c("4 cylinders","6 cylinders","8 cylinders"))
str(cyl)
densityplot(~mpg)
bwplot(cyl~mpg|gear)
?bwplot
library(lattice)
attach(mtcars)
str(cyl)
str(gear)
bwplot(cyl~mpg|gear)
xyplot(mpg~wt|cyl*gear)
xyplot(mpg~wt|cyl)
xyplot(mpg~wt|cyl*gear)
cloud(mpg~wt*qsec|cyl)
cloud(mpg~wt*qsec|cyl*gear)
xyplot.ts(mpg~wt|cyl*gear)
dotplot(cyl~mpg|gear)
splom(mtcars[c(1,3,4,5,6)])
detach(mtcars)
mygraph <- densityplot(~height|voice.part,data = singer)
mygraph
plot(mygraph)
update(mygraph,jitter=.05)
update(mygraph,jitter=1)
update(mygraph,jitter=.005)
install.packages("symbols")
temp <- array(1:24,c(2,3,4),dimnames = list(dim1,dim2,dim3))
dim1<-c("A1","A2")
dim2<-c("B1","B2","B3")
dim3<-c("C1","C2","C3","C4")
z<-array(1:24,c(2,3,4),dimnames=list(dim1,dim2,dim3))
z
z[1,2,3]
version()
ver()
version
install.packages("devtools")
RStudio.Version()
library(devtools)
version
exit
exit()
quit()
getwd()
memory.limit()
quit
quit()
z
library(data.table)
mtcars_dt <- data.table(mtcars)
library(data.table)
mtcars_dt <- data.table(mtcars)
mtcars_dt[1:10]
temp <- mtcars_dt[1:10]
temp <- mtcars_dt[1:10]
load("D:/R/R/.RData")
setwd("D:/R")
tmp <- copy(temp)
library(data.table)
tmp <- copy(temp)
a <- rep(c(1:3),each=3)
b
rm(b)
a <- rep(c(1:3),each=3)
load("D:/R/.RData")
rm(a,b)
a <- rep(c(1:3),each=3)
dt <- data.table(x=rep(c("a","b","c"),times=3),y=1:9,stringsAsFactors = F)
View(dt)
install.packages("dplyr")
library(dplyr)
?filter
View(mtcars_dt)
mtcars_dt[,hp]
mtcars_dt[,list(hp)]
mtcars_dt[,.(hp)]
names(mtcars_dt)
mtcars_dt[,.("hp")]
class(mtcars_dt)
mtcars_dt[,dist]
mtcars_dt[1:3,dist]
mtcars_dt[1:3,.(dist)]
library(data.table)
mtcars_dt[1:3,dist]
mtcars_dt[1:3,.(dist)]
mtcars_dt[1:3]
mtcars[1:3,list(hp)]
mtcars[1:3,list("hp")]
mtcars[1:3,.("hp")]
mtcars[1:3,.(hp)]
mtcars[1:3,hp]
is.data.table(mtcars_dt)
data(package="base")
data()
mtcars_dt[1:3,hp]
mtcars_dt[1:3,list(hp)]
mtcars_dt[1:3,list("hp")]
temp <- copy(mtcars_dt)
View(temp)
temp[,!c("hp")]
View(temp)
temp[,c("hp"):=NULL]
temp <- copy(mtcars_dt)
View(temp)
tmp <- temp[,c("hp"):=NULL]
"hp" %in% names(tmp)
"cyl" %in% names(tmp)
dt <- data.table(x=rep(c("a","b","c"),times=3),y=1:9,,z=rep(1:3,each=3),
stringsAsFactors = F)
library(data.table)
dt <- data.table(x=rep(c("a","b","c"),times=3),y=1:9,,z=rep(1:3,each=3),
stringsAsFactors = F)
dt <- data.table(x=rep(c("a","b","c"),times=3),y=1:9,
z=rep(1:3,each=3),stringsAsFactors = F)
View(dt)
dt <- data.table(x=rep(c("a","b","c"),times=3),y=1:9,z=rep(1:3,each=3),stringsAsFactors = F)
View(dt)
train <- fread(header = T,stringsAsFactors = F,
file = "D:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
library(data.table)
train <- fread(header = T,stringsAsFactors = F,
file = "D:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
library(mice)
library(MicrosoftR)
md.pattern(train)
nrow(na.omit(train))
gc()
nrow(train[complete.cases(train),])
library(VIM)
data(package="VIM",sleep)
nrow(na.omit(sleep))
18/62
20/62
?lm
library(magrittr)
view(sleep)
View(sleep)
mice(sleep,seed = 1234) %>% with(lm(Dream ~ Span + Gest)) %>% pool() %>% summary()
imp <- mice(sleep, seed = 1234)
fit <- with(imp,lm(Dream ~ Span + Gest))
pooled <- pool(fit)
summary(pooled)
View(train)
<<<<<<< HEAD
nrow(na.omit(train))
View(na.omit(train))
str(train$Cabin)
class(train$Cabin)
=======
test$Survived <- NA
comb <- rbind(train,test)
View(comb)
library(mice)
md.pattern(train)
md.pattern(as.matrix(train))
md.pattern(train$Cabin)
nrow(is.na(train$Cabin))
nrow(!is.na(train$Cabin))
sum(is.na(train$Cabin))
is.na(head(train$Cabin,20))
sum(train$Cabin)
str(train$Cabin)
nrow(train$Cabin[train$Cabin==""])
train$Cabin[train$Cabin==""]
train$Cabin[train$Cabin]
library(data.table)
train[Cabin='']
train[Cabin=""]
train[Cabin==""]
nrow(train[Cabin==""])
nrow(train)
nrow(train[Cabin!=""])
View(train[Cabin==""])
md.pattern(train[,list(PassengerId,Cabin)])
md.pattern(train[,c("PassengerId","Cabin")])
class(train[,c("PassengerId","Cabin"))
class(train[,c("PassengerId","Cabin")])
nrow(train[Cabin==" "])
nrow(train[Cabin==""])
nrow(train[Cabin %in% " "])
nrow(train[Cabin %in% ""])
train[Cabin==""] <- NA
View(train)
train <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
train$Cabin[Cabin==""] <- NA
train[Cabin=="",list(Cabin)] <- NA
train[,list(Cabin)]
train[Cabin=="",list(Cabin)]
train[Cabin=="",list(Cabin)] <- NA
train[train$Cabin=="",Cabin]
train[train$Cabin=="",Cabin] <- NA
train[train$Cabin=="",train$Cabin] <- NA
train[train$Cabin=="",train$Cabin]
train[,Cabin==""]
train[,train$Cabin==""]
View(train)
View(tuk)
nrow(train[Cabin==""])
train$Cabin[train$Cabin==""] <- NA
View(train)
md.pattern(train)
is.null(train$Cabin)
is.na(train$Cabin)
md.pattern(train)
is.na(train$Name)
train <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
test <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/test.csv")
test$Survived <- NA
comb <- rbind(train,test)
sum(is.na(train$Cabin))
sum(is.na(train$Name))
sum(is.na(train$Age))
train$Cabin[train$Cabin==""] <- NA
sum(is.na(train$Cabin))
687/891
sum(is.na(train$Fare))
sum(is.na(train$Embarked))
library(dplyr)
rm(comb)
# 合并train和test
comb <- rbind(train,test)
View(comb)
summary(train)
glimpse(train)
str(train)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
test <- test %>% mutate(Pclass = factor(Pclass),Embarked = factor(Embarked),Sex = factor(Sex))
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
md.pattern(test)
md.pattern(train)
md.pattern(test)
md.pattern(comb)
view
View(nhanes)
ggplot(train, aes(Pclass, Fare, colour = Survived)) +
geom_boxplot() +
ggplot(train, aes(Pclass, Fare, colour = Survived)) +
geom_boxplot()
library(ggplot2)
ggplot(train, aes(Pclass, Fare, colour = Survived)) +
geom_boxplot()
ggplot(train, aes(Pclass, log10(Fare), colour = Survived)) +
geom_boxplot()
ggplot(train, aes(Pclass, Fare, colour = Survived)) +
geom_boxplot() + scale_y_log10()
library(data.table)
str(comb)
setDT(comb)
str(comb)
comb[is.na(Embarked)]
comb[is.na(Embarked),]
comb[is.na(Embarked)][]
comb[is.na(Embarked)][[]]
comb[is.na(Embarked)][][]
comb[,comb$Embarked==NA]
comb[,is.na(comb$Embarked)]
comb[is.na(comb$Embarked),]
is.na(comb$Embarked)
library(dplyr)
filter(comb,is.na(Embarked))
View(comb)
train <- fread(header = T,stringsAsFactors = F,na.strings = "NA"
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
#导入训练集和测试集
train <- fread(header = T,stringsAsFactors = F,na.strings = "NA",
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
View(train)
View(train)
train$Embarked <- factor(train$Embarked)
View(train)
sum(is.na(train$Embarked))
sum(train[Embarked==""])
sum(train[Embarked=="",])
train[Age==NA]
train[Age==NA,]
train[Age=NA]
train[Age=19]
train[Age==19]
train[Age=="NA"]
train[Age==NA]
train[is.na(Age)]
train[Embarked==""]
train[""]
train[1==""]
train$Embarked[Embarked==""]
train$Embarked[""]
train$Embarked[train$Embarked=""]
train$Embarked[train$Embarked="",]
train$Embarked[train$Embarked=="",]
train$Embarked[train$Embarked==""]
train$Embarked[train$Embarked=="C"]
train$Embarked[train$Embarked==""] <- NA
sum(is.na(train$Embarked))
tmp <- read_csv('G:/R/kaggle_data/Titanic Machine Learning from Disaster/test.csv')
tmp <- read.csv('G:/R/kaggle_data/Titanic Machine Learning from Disaster/test.csv')
View(tmp)
sum(is.na(tmp$Embarked))
tmp <- read.csv('G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv')
sum(is.na(tmp$Embarked))
rm(tmp)
#导入训练集和测试集
train <- fread(header = T,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
View(train)
library(mice)
library(ggplot2)
train <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
View(train)
train$Cabin[train$Cabin==""] <- NA
View(train)
# 发现部分缺失值并没有被读取为NA，而是""，所以作如下操作
train$Embarked[train$Embarked==""] <- NA
sum(is.na(train$Embarked))
md.pattern(train)
library(VIM)
aggr(train)
aggr(train,numbers=T)
aggr(train, prop = F)
aggr(train, prop = F, combined = T)
aggr(train, prop = F, axes=T
)
aggr(train, prop = F, number = T)
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
train <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
test <- fread(header = T,stringsAsFactors = F,
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/test.csv")
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
View(comb)
View(test)
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
View(comb)
rm(comb)
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test)
?rbind
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test,fill=NA)
# 合并train和test,test中不存在的列Survived会自动生成NA
comb <- rbind(train,test,fill=T)
view(comb)
view(comb)
View(comb)
aggr(combine, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
?rbind
comb$Embarked[comb$Embarked==""] <- NA
comb$Cabin[comb$Cabin==""] <- NA
sum(nrow(comb$Pclass[comb$Pclass==""]))
sum(nrow(comb$Sex[comb$Sex==""]))
sum(nrow(comb$Fare[comb$Fare==""]))
sum(nrow(comb$Ticket[comb$Ticket==""]))
sum(nrow(comb$Embarked[comb$Ticket==""]))
sum(nrow(comb$Embarked[comb$Embarked==""]))
#缺失值可视化
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
md.pattern(trian)
md.pattern(train)
comb %>%
filter(Embarked != "Q" & Pclass == 1 & Sex == "female") %>%
group_by(Embarked, Pclass, Sex, Pclass, Parch, SibSp) %>%
summarise(count = n())
md.pattern(comb)
train[is.na(Embarked)]
train[Embarked==NA]
train[Embarked=NA]
train[train$Embarked==NA,]
train[train$Embarked=NA,]
train[is.na(train$Embarked),]
filter(train,is.na(Embarked))
sum(is.na(trian$emba))
sum(is.na(train$Embarked))
train$Embarked[train$Embarked==""] <- NA
train$Cabin[train$Cabin==""] <- NA
# 合并train和test,test中不存在的列Survived由参数fill=T生成NA
comb <- rbind(train,test, fill = T)
sum(is.na(train$Embarked))
train %>% filter(is.na(Embarked))
#缺失值可视化
aggr(train, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
sum(is.na(train$Cabin))
md.pattern(train)
View(train)
sum(is.na(train$Embarked))
train %>% filter(is.na(Embarked))
View(comb)
#增加Title列
comb$Title <- gsub('(.*, )|(\\..*)', '', comb$Name)
table(comb$Sex,comb$Title)
library(data.table)
temp <- fread(file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv", header = T,
stringsAsFactors = F, na.strings = c("NA",""))
View(temp)
temp <- fread(file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv", header = T,
stringsAsFactors = F, na.strings = c("NA","","N/A","null"))
View(temp)
sum(is.na(temp$Embarked))
which(table(comb$Sex,comb$Title)>200)
#导入训练集和测试集,发现部分空值不能正确读取为NA，故加入参数na.strings = c("NA","")
train <- fread(header = T, stringsAsFactors = F,na.strings = c("NA","","N/A","null"),
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
library(VIM)
#缺失值可视化
aggr(train, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
nrow(na.omit(train))
table(comb$Sex,comb$Title)
View(test)
View(mygraph)
gc()
table(comb$Sex,comb$Title)
itle <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title == 'Mlle'] <- 'Miss'
comb$Title[comb$Title == 'Ms'] <- 'Miss'
comb$Title[comb$Title == 'Mme'] <- 'Mrs'
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
rare_title <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
table(comb$Sex,comb$Title)
library(ggplot2)
ggplot(comb,aes(Title))
geom_bar(aes(fill=Survived))
ggplot(comb,aes(Title,fill=Survived))
geom_bar(stat = "count",position = "dodge")
ggplot(comb,aes(Title,fill=Survived))+
geom_bar(stat = "count",position = "dodge")
str(train)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
library(magrittr)
library(dplyr)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
test <- test %>% mutate(Pclass = factor(Pclass),Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test,fill = T)
test <- test %>% mutate(Survived = "NA",Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test,fill = T)
test <- test %>% mutate(Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test, fill = T)
View(temp)
test <- test[,-c("Survived")]
test <- test[,-Survived]
test <- test[,-test$Survived]
test <- test[,!test$Survived]
test <- select(test,-Survived)
View(test)
temp <- rbind(train,test)
temp <- rbind(train,test,fill=NA)
temp <- rbind(train,test,fill=T)
temp <- bind_rows(test,train)
View(temp)
View(comb)
View(temp)
temp <- bind_rows(train,test)
View(temp)
temp$Title <- comb$Title
View(temp)
comb <- temp
rm
rm(temp)
gc()
###下面开始进行初步探索数据集###
table(comb$Sex,comb$Title)
ggplot(train,aes(Title,fill = Survived))
ggplot(comb[1:891],aes(Title,fill = Survived))
ggplot(comb[1:891,],aes(Title,fill = Survived))
geom_bar(stat = "count",position = "dodge")
geom_bar(stat = 'count',position = 'dodge')
ggplot(comb[1:891,],aes(Title,fill = Survived))
geom_bar(stat = "count",position = "dodge")
ggplot(comb[1:891,],aes(Title,fill = Survived))+
geom_bar(stat = "count",position = "dodge")
labs("no point")
+labs("no point")
ggplot(comb[1:891,],aes(Ticket,Fare,fill = Survived))+
geom_point()
ggplot(comb[1:891,],aes(Ticket,Fare))+
geom_point()
ggplot(comb[1:891,],aes(Ticket,Embarked))+
geom_point()
ggplot(comb[1:891,],aes(factor(Ticket),Fare))+
geom_point()
nlevels(factor(comb[1:891,]$Ticket))
>>>>>>> 19db931553494d10858e6cf41b0e8baee23e4759
