itle <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title == 'Mlle'] <- 'Miss'
comb$Title[comb$Title == 'Ms'] <- 'Miss'
comb$Title[comb$Title == 'Mme'] <- 'Mrs'
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
rare_title <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
table(comb$Sex,comb$Title)
library(ggplot2)
ggplot(comb,aes(Title))
geom_bar(aes(fill=Survived))
ggplot(comb,aes(Title,fill=Survived))
geom_bar(stat = "count",position = "dodge")
ggplot(comb,aes(Title,fill=Survived))+
geom_bar(stat = "count",position = "dodge")
str(train)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
library(magrittr)
library(dplyr)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
test <- test %>% mutate(Pclass = factor(Pclass),Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test,fill = T)
test <- test %>% mutate(Survived = "NA",Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test,fill = T)
test <- test %>% mutate(Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
temp <- rbind(train,test, fill = T)
View(temp)
test <- test[,-c("Survived")]
test <- test[,-Survived]
test <- test[,-test$Survived]
test <- test[,!test$Survived]
test <- select(test,-Survived)
View(test)
temp <- rbind(train,test)
temp <- rbind(train,test,fill=NA)
temp <- rbind(train,test,fill=T)
temp <- bind_rows(test,train)
View(temp)
View(comb)
View(temp)
temp <- bind_rows(train,test)
View(temp)
temp$Title <- comb$Title
View(temp)
comb <- temp
rm
rm(temp)
gc()
###下面开始进行初步探索数据集###
table(comb$Sex,comb$Title)
ggplot(train,aes(Title,fill = Survived))
ggplot(comb[1:891],aes(Title,fill = Survived))
ggplot(comb[1:891,],aes(Title,fill = Survived))
geom_bar(stat = "count",position = "dodge")
geom_bar(stat = 'count',position = 'dodge')
ggplot(comb[1:891,],aes(Title,fill = Survived))
geom_bar(stat = "count",position = "dodge")
ggplot(comb[1:891,],aes(Title,fill = Survived))+
geom_bar(stat = "count",position = "dodge")
labs("no point")
+labs("no point")
ggplot(comb[1:891,],aes(Ticket,Fare,fill = Survived))+
geom_point()
ggplot(comb[1:891,],aes(Ticket,Fare))+
geom_point()
ggplot(comb[1:891,],aes(Ticket,Embarked))+
geom_point()
ggplot(comb[1:891,],aes(factor(Ticket),Fare))+
geom_point()
nlevels(factor(comb[1:891,]$Ticket))
load("G:/R/.RData")
rm(mymatrix)
rm(dim1)
##apply函数族
by1
##apply函数族
counts
rm(dim2,dim3,rnames,xx,yy,z,cnames,by1,by2,cells,counts)
View(relweights)
?base
??base
library(help='base')
is.R()
gc()
rm(list=ls())
# 封装fun1
fun1<-function(x){
myFUN<- function(x, c1, c2) {
c(sum(x[c1],1), mean(x[c2]))
}
apply(x,1,myFUN,c1='x1',c2=c('x1','x2'))
}
# 封装fun2
fun2<-function(x){
df<-data.frame()
for(i in 1:nrow(x)){
row<-x[i,]
df<-rbind(df,rbind(c(sum(row[1],1), mean(row))))
}
}
# 封装fun3
fun3<-function(x){
data.frame(x1=x[,1]+1,x2=rowMeans(x))
}
# 生成数据集
x <- cbind(x1=3, x2 = c(400:1, 2:500))
load("G:/R/.RData")
load("G:/R/.RData")
load("C:/Users/nzhao/Desktop/RData")
load("C:/Users/nzhao/Desktop/RData")
View(fun1)
rm(z,yy,xx,t,rnames,dim1:dim3,counts,cnames,cells,by1:2,dt)
rm(z,yy,xx,t,rnames,dim1:dim3,counts,cnames,cells,by1,by2,dt)
rm(z,yy,xx,t,rnames,dim1,dim2,dim3,counts,cnames,cells,by1,by2,dt)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
library(magrittr)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
library(dplyr)
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
test <- test %>% mutate(Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
# 合并train和test,自动补全test中的Survived=NA
comb <- dplyr::bind_rows(train,test)
View(comb)
rare_title <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title == 'Mlle'] <- 'Miss'
comb$Title[comb$Title == 'Ms'] <- 'Miss'
comb$Title[comb$Title == 'Mme'] <- 'Mrs'
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
#增加Title列
comb$Title <- gsub('(.*, )|(\\..*)', '', comb$Name)
rare_title <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title == 'Mlle'] <- 'Miss'
comb$Title[comb$Title == 'Ms'] <- 'Miss'
comb$Title[comb$Title == 'Mme'] <- 'Mrs'
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
rm(mymatrix)
system.time(fun1(x))
system.time(fun2(x))
system.time(fun3(x))
str(cbind(x1=3, x2=c(2:1,4:5)))
cbind(x1=3, x2=c(2:1,4:5))
sapply(cbind(x1=3, x2=c(2:1,4:5)),sum)
str(1:2)
a <- 1:2
str(a)
rm
rm(a)
View(iris)
tapply(iris$Petal.Length,iris$Species,mean)
library(dplyr)
group_by(iris$Petal.Length,iris$Species)
iris$Petal.Length %>% group_by(,iris$Species) %>% mean()
iris$Petal.Length %>% group_by(,iris$Species,mean)
iris$Petal.Length %>% group_by(,iris$Species,mean())
iris$Petal.Length %>% group_by(iris$Species) %>% summarise(mean=mean())
iris %>% group_by(iris$Species) %>% summarise(mean=mean())
iris %>% group_by(.,iris$Species) %>% summarise(mean=mean())
iris %>% group_by(.,iris$Species) %>% summarise(.,mean=mean())
library(magrittr)
group_by(iris,Species)
iris %>% group_by(Species)
iris %>% group_by(Species) %>% summarise(mean = mean(Petal.Length))
2%%2
2%/%2
2\2
2%%4
2%%
3%/%2
3%\%2
env.profile()
View(train)
library(data.table)
library(ggplot2)
train <- fread(header = T, stringsAsFactors = F,na.strings = c("NA","","N/A","null"),
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/train.csv")
test <- fread(header = T, stringsAsFactors = F,na.strings = c("NA","","N/A","null"),
file = "G:/R/kaggle_data/Titanic Machine Learning from Disaster/test.csv")
train <- train %>% mutate(Survived = factor(Survived),Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
test <- test %>% mutate(Pclass = factor(Pclass),
Embarked = factor(Embarked),Sex = factor(Sex))
# 合并train和test,自动补全test中的Survived=NA
comb <- dplyr::bind_rows(train,test)
#增加Title列
comb$Title <- gsub('(.*, )|(\\..*)', '', comb$Name)
rare_title <- c("Capt","Col","Don","Dona","Dr","Jonkheer","Lady","Major","Rev","Sir","the Countess")
comb$Title[comb$Title == 'Mlle'] <- 'Miss'
comb$Title[comb$Title == 'Ms'] <- 'Miss'
comb$Title[comb$Title == 'Mme'] <- 'Mrs'
comb$Title[comb$Title %in% rare_title] <- 'Rare Title'
library()
library(VIM)
#缺失值可视化
aggr(train, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
View(train)
library(ggplot2)
ggplot(train,aes(Fare,color= Survived))+
geom_density()
ggplot(train,aes(Fare,color= Survived))+
geom_density(stat = 'count', show.legend = T)
ggplot(train,aes(Fare,color= Survived))+
geom_histogram(stat = 'count', show.legend = T)
ggplot(train,aes(Fare,color= Survived))+
geom_histogram(stat = 'count', show.legend = T, bins = 20)
ggplot(train,aes(Fare,color= Survived))+
geom_histogram(stat = 'count', show.legend = T, bins = 10)
train[train$Embarked==NA,]
train[train$Embarked=NA,]
train[is.na(train$Embarked),]
ggplot(train,aes(Embarked,fill = Survived))+
geom_bar(position = 'dodge', stat = 'count')
head(gsub('(.*, )|(\\..*)', '', comb$Name),20)
head(gsub('(.*, )|(\\..*)', '..', comb$Name),20)
head(gsub('(.*, )', '..', comb$Name),20)
head(gsub('(.*, )|(\...*)', '..', comb$Name),20)
head(gsub('(.*, )|(\..*)', '..', comb$Name),20)
head(gsub('(\\..*)', '..', comb$Name),20)
head(gsub('(\..*)', '..', comb$Name),20)
head(sub('(\..*)', '..', comb$Name),20)
head(gsub('(.*, )|(\..*)', '..', comb$Name),20)
strsplit(comb$Name,split = '[,.]')
strsplit(comb$Name,split = '[,.]')[[1]][1]
head(strsplit(comb$Name,split = '[,.]')[[1]][1])
head(strsplit(comb$Name,split = '[,.]'))
title <- head(sapply(comb$Name,function(x)strsplit(x,split = '[,.]')[[1]][2]))
title
class(title)
View(titl)
View(title)
ncol(title)
nrow(title)
dim(title)
head(strsplit(comb$Name, split = '[,.]')[[1]][1])
head(strsplit(comb$Name, split = '[,.]')[[1]][2])
head(sapply(comb$Name,function(x)strsplit(x,split = '[,.]')[[1]][2]))
Surname <- sapply(comb$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
View(Surname)
title <- sapply(comb$Name,function(x)strsplit(x,split = '[,.]')[[1]][2])
View(title)
rm(title)
rm(Surname)
title <- sapply(comb$Name,function(x)strsplit(x,split = '[,.]')[[1]][2])
str(title)
str(comb$Title)
library(magrittr)
library(data.table)
temp <- copy(comb) %>% .$title <- title
temp <- copy(comb)
temp$title <- title
View(temp)
rm(title)
rm(temp)
library(ggplot2)
lapply(comb, function(x) length(unique(x)))
library(ggplot2)
View(comb)
ggplot(comb[1:891,],aes(Fare,Ticket,color = Survived))+
geom_point()
ggplot(comb[1:891,],aes(Fare,Ticket,color = Survived))+
geom_bar()
ggplot(comb[1:891,],aes(Fare,color = Survived))+
geom_bar(stat = 'count', position = 'dodge')
ggplot(comb[1:891,],aes(Fare,color = Survived))+
geom_bar(stat = 'count', position = 'dodge',jitter = T)
comb$Title <- factor(comb$Title)
View(comb)
library(VIM)
# 缺失值可视化，图中可以看到：cabin缺失最多，其次是
aggr(train, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
library(mice)
comb[c(62,830),'Fare']
comb[c(62,830),'Fare'][1]
comb[c(62,830),'Fare'][[1]][1]
comb[c(62,830),'Fare'][2]
comb[c(62,83),'Fare'][2]
comb[c(62,83),'Fare']
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>))
)
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', comb[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', comb[c(62, 830), 'Fare'][[1]][2], '</b>))
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', comb[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', comb[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', comb[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', comb[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', comb[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', comb[c(62, 830), 'Fare'][[1]][2], '</b>respectively))
)
)
)
)
''
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', comb[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', comb[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', comb[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', comb[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
gc()
cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', comb[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', comb[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', comb[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', comb[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
comb[1044,]
comb[is.na(comb$Fare),]
library(VIM)
# 缺失值可视化，图中可以看到：cabin缺失最多(687)，其次是age(177),最后是emarked（2）
aggr(train, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
# 缺失值可视化，图中可以看到：cabin缺失最多(687)，其次是age(177),最后是emarked（2）
aggr(comb, prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
comb[1:5,Cabin]
comb[1:5,'Cabin]
comb[1:5,'Cabin']
head(comb['Cabin'])
lapply(comb[c('PassengerId','Pclass','Sex','Embarked','Title','Surname','Family')], function(x) as.factor(x))
lapply(comb[c('PassengerId','Pclass','Sex','Embarked','Title')], function(x) as.factor(x))
temp <- comb
strsplit(train$Name[1:10,],split = '[,.]')
strsplit(train$Name[1:10],split = '[,.]')
strsplit(train$Name[1:10],split = '[, ]')
strsplit(train$Name[1:10],split = '[,]')
### sibsp和parch的特征工程
comb$Fsize <- comb$SibSp + comb$Parch + 1
# Create a family variable
comb$Family <- paste(comb$Surname, comb$Fsize, sep='_')
# 同样对Family size进行分类
comb$FsizeD[comb$Fsize == 1] <- 'singleton'
comb$FsizeD[comb$Fsize < 5 & comb$Fsize > 1] <- 'small'
comb$FsizeD[comb$Fsize > 4] <- 'large'
### 紧接着尝试填补缺失值，然而因为Cabin缺失值太多，只能暂时放弃
# 填补Embarked、Fare
comb$Embarked[c(62, 830)] <- 'C'
comb$Fare[1044] <- median(comb[comb$Pclass == '3' & comb$Embarked == 'S', ]$Fare, na.rm = TRUE)
# 因子化部分变量
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
comb[factor_vars] <- lapply(comb[factor_vars], function(x) as.factor(x))
View(comb)
comb$Surname <- sapply(comb$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
comb[factor_vars] <- lapply(comb[factor_vars], function(x) as.factor(x))
View(comb)
### sibsp和parch的特征工程
comb$Fsize <- comb$SibSp + comb$Parch + 1
comb$Surname <- sapply(comb$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
# Create a family variable
comb$Family <- paste(comb$Surname, comb$Fsize, sep='_')
# 同样对Family size进行分类
comb$FsizeD[comb$Fsize == 1] <- 'singleton'
comb$FsizeD[comb$Fsize < 5 & comb$Fsize > 1] <- 'small'
comb$FsizeD[comb$Fsize > 4] <- 'large'
### 紧接着尝试填补缺失值，然而因为Cabin缺失值太多，只能暂时放弃
# 填补Embarked、Fare
comb$Embarked[c(62, 830)] <- 'C'
comb$Fare[1044] <- median(comb[comb$Pclass == '3' & comb$Embarked == 'S', ]$Fare, na.rm = TRUE)
# 因子化部分变量
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
comb[factor_vars] <- lapply(comb[factor_vars], function(x) as.factor(x))
View(comb)
library(mice)
# Age可以用mice插补
mice_mod <- mice(comb[, !names(comb) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method = 'rf', seed = 129)
# Age可以用mice插补
imp <- mice(comb[, !names(comb) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method = 'rf', seed = 129)
# Age可以用mice插补
imp <- mice(comb[, !names(comb) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method = 'rf', seed = 129)
mice_result <- complete(mice_mod)
mice_result
hist(comb$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_result$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
library(ggplot2)
ggplot(comb[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
facet_grid(.~Sex)
ggplot(comb[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
facet_grid(Sex~.)
library(VIM)
aggr(comb[1:891,], prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
comb$Age <- mice_result$Age
aggr(comb[1:891,], prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
ggplot(comb[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
facet_grid(.~Sex)
par(mfrow=c(1,2))
hist(comb$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_result$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
comb$Child[comb$Age < 18] <- 'Child'
comb$Child[comb$Age >= 18] <- 'Adult'
table(comb$Child, comb$Survived)
comb$Mother <- 'Not Mother'
comb$Mother[comb$Sex == 'female' & comb$Parch > 0 & comb$Age > 18 & comb$Title != 'Miss'] <- 'Mother'
table(comb$Mother, comb$Survived)
# 因子化
comb$Child  <- factor(comb$Child)
comb$Mother <- factor(comb$Mother)
library(randomForest)
train <- comb[1:891,]
test <- comb[892:1309,]
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title +
FsizeD + Child + Mother,
data = train)
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
View(rf_model)
library(magrittr)
# Get variable importance
varImportance <- importance(rf_model) %>% data.frame(Variables = names(.), Importance = round(.[,'MeanDecreaseGini'],2))
install.packages('pipeR')
library(pipeR)
# Get variable importance
varImportance <- importance(rf_model) %>>% data.frame(Variables = names(.), Importance = round(.[,'MeanDecreaseGini'],2))
# Get variable importance
varImportance <- importance(rf_model) %>% data.frame(Variables = names(), Importance = round(.[,'MeanDecreaseGini'],2))
# Get variable importance
varImportance <- importance(rf_model) %>% data.frame(Variables = row.names(), Importance = round(.[,'MeanDecreaseGini'],2))
# Get variable importance
varImportance <- importance(rf_model) %>% data.frame(Variables = row.names(.), Importance = round(.[,'MeanDecreaseGini'],2))
detach("package:pipeR")
# Get variable importance
varImportance <- importance(rf_model) %>% data.frame(Variables = row.names(.), Importance = round(.[,'MeanDecreaseGini'],2))
importance(rf_model)
varImportance
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
library(dplyr)
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
mutate(mtcars[1:20,], row_number() == 1L)
mutate(mtcars[1:20,], row_number() =1L)
rankImportance
dense_rank(c(5, 1, 3, 2, 2, NA))
min_rank(c(5, 1, 3, 2, 2, NA))
??dplyr
help(package='dplyr')
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()
help(package='ggplot2')
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+theme_light()
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+theme_bw()
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+theme_classic()
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 1, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip()+theme_classic()
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(y = reorder(Variables, Importance),
x = Importance, fill = Importance)) +
geom_bar(stat='identity') +
labs(x = 'Variables') +
coord_flip()+theme_classic()
reorder(rankImportance$Variables,Importance)
reorder(rankImportance$Variables,rankImportance$Importance)
ggplot(rankImportance,aes(x = Variables))+
geom_bar(stae)
ggplot(rankImportance,aes(x = Variables))+
geom_bar(stat = )
ggplot(rankImportance,aes(x = Variables))+
geom_bar(stat = 'identity')
# 最终结果预测
solution <- predict(rf_model,test) %>% data.frame(PassengerID = test$PassengerId, Survived = .)
library(data.table)
fread(solution, row.names = F,
file = 'G:/R/kaggle_data/Titanic Machine Learning from Disaster/submission_titanic.csv')
fread(solution, row.names = FALSE,
file = 'G:/R/kaggle_data/Titanic Machine Learning from Disaster/submission_titanic.csv')
fread(solution, file = 'G:/R/kaggle_data/Titanic Machine Learning from Disaster/submission_titanic.csv')
fwrite(solution, row.names = FALSE,
file = 'G:/R/kaggle_data/Titanic Machine Learning from Disaster/submission_titanic.csv')
